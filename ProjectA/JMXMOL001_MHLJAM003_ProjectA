//------------------------------------------------
// Design Name : ALU
// File Name : ALU.v
// Function : Arithmatic & Logic Functions
// Coders : James Mahlaba(MHLJAM003) & Kananelo Jama (JMXMOL001)
//------------------------------------------------
module ALU(
 input clk,
 input [7:0] A, B,
 input [3:0] ALU_Sel, //4-bit ALU-select
 output reg [7:0] ALU_out
);
 //reg [7:0] A;
 //reg [7:0] B;
//output register
 reg [7:0] ALU_Result;
always@(posedge clk)
begin
case(ALU_Sel)
4'b0000: // Addition
ALU_Result = A + B ;
4'b0001: //Subtraction
ALU_Result = A - B;
4'b0010: //Multiplication
ALU_Result = A*B;
4'b0011: //Division
ALU_Result = A / B;

4'b0100: //ADDA
ALU_Result = ALU_Result + A;

4'b0101: //MulA
ALU_Result = ALU_Result * A;

4'b0110: //MAC
ALU_Result = ALU_Result + (A * B);
4'b0111: //ROL - Rotate Left
 ALU_Result = {A[6:0],A[7]}; //ALU_Result = {{A[6:0]},{A[7]}};

4'b1000: //ROR - Rotate Right
 ALU_Result = {A[0],A[7:1]}; //ALU_Result = {{A[0]},{A[7:1]}};

4'b1001: //AND
ALU_Result = A & B;

4'b1010: //OR
ALU_Result = A | B;

4'b1011: //XOR
ALU_Result = A ^ B;

4'b1100: //NAND
 ALU_Result = A~&B;

4'b1101: //ETH
 if(A==B)
ALU_Result = 8'b11111111;
 else
 ALU_Result = 8'b00000000;

4'b1110: //GTH
 if(A>B)
 ALU_Result = 8'b11111111;
 else
 ALU_Result = 8'b00000000;

4'b1111: //LTH
 if(A<B)
 ALU_Result = 8'b11111111;
 else
 ALU_Result = 8'b00000000;

default: ALU_Result = A + B; //Addition
endcase
ALU_out <= ALU_Result;
end
endmodule
